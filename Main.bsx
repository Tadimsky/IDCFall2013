' {$STAMP BS2sx, Movement.bsx, Comm.bsx}
' {$PBASIC 2.5}

' Sensor Information
SnsrLeft CON 10
SnsrMiddle CON 9
SnsrRight CON 8

' Ping Sensor
Ping_Pin    CON   15

InConstant  CON   890
inDistance  VAR   Word
maxDistance  VAR   Word
time        VAR   Word


' State
stateFollowLine VAR Word
stateShouldStop VAR Word

' Whiskers
leftWhisker CON 14
rightWhisker CON 0

leftDetected VAR Bit
rightDetected VAR Bit

' Thresholds
blackColor CON 500
readDistance CON 11


leftDuration VAR Word
middleDuration VAR Word
rightDuration VAR Word

stateFollowLine = 0
stateShouldStop = 0


DO
  GOSUB ReadWhiskers
  GOSUB ReadColors
  GOSUB ReadPing

  IF inDistance < readDistance AND stateFollowLine  = 0 THEN
    GOSUB DetermineColor
  ELSE
    IF inDistance > 150 OR stateFollowLine = 1 THEN
      stateFollowLine = 1
      GOSUB FollowLine
    ELSE
      GOSUB MoveForward
    ENDIF
  ENDIF

SkipRest:
LOOP


FindExit:
  counter VAR Nib

  FOR counter = 0 TO 5
    GOSUB MoveBackward
    PAUSE 10
  NEXT

  numToTurn VAR Nib
  numToTurn = 5
  maxDistance = 0

  leftTurn VAR Nib

  DO WHILE (maxDistance < 150)
    leftTurn = 0

    ' Sweep to the Left
    FOR counter = 0 TO numToTurn
      GOSUB LeftAdjust
      GOSUB ReadPing
      IF inDistance > maxDistance THEN
        leftTurn = counter + numToTurn
        maxDistance = inDistance
      ENDIF
    NEXT

    ' Return to the Center
    FOR counter = 0 TO numToTurn
      GOSUB RightAdjust
    NEXT

    ' Sweep to the Right
    FOR counter = 0 TO numToTurn
      GOSUB RightAdjust
      GOSUB ReadPing
      IF inDistance > maxDistance THEN
        leftTurn = numToTurn - counter
        maxDistance = inDistance
      ENDIF
    NEXT

    IF maxDistance < 150 THEN
      numToTurn = numToTurn + 5
      ' Return to the Center
      FOR counter = 0 TO numToTurn
        GOSUB LeftAdjust
      NEXT
      GOSUB MoveBackward
    ELSE
      FOR counter = 0 TO leftTurn + 1
        GOSUB LeftAdjust
      NEXT
    ENDIF

  LOOP
RETURN

ReadColors:
  HIGH SnsrLeft
  PAUSE 1
  RCTIME SnsrLeft, 1, leftDuration

  HIGH SnsrMiddle
  PAUSE 1
  RCTIME SnsrMiddle, 1, middleDuration

  HIGH SnsrRight
  PAUSE 1
  RCTIME SnsrRight, 1, rightDuration

  DEBUG CLS, "Left Color", DEC leftDuration, CR
  DEBUG "Middle Color", DEC middleDuration, CR
  DEBUG "Right Color", DEC rightDuration, CR
RETURN

DetermineColor:
  IF (middleDuration > blackColor) THEN
    IF (leftDuration > blackColor) THEN
      IF (rightDuration > blackColor) THEN
        ' Left, Middle, Right are black
        ' Definitely on a square
        DEBUG "Left, Middle, Right are Black", CR
        GOSUB LeftPivot
        GOSUB LeftPivot
        GOSUB MoveForward
        GOSUB MoveForward
      ELSE
        ' Left, Middle are black
        ' Could be on a square
        DEBUG "Left, Middle are Black", CR
        GOSUB LeftPivot
        GOSUB LeftPivot
        GOSUB MoveForward
        GOSUB MoveForward
      ENDIF
    ELSE
      IF (rightDuration > blackColor) THEN
        ' Middle, Right are black
        ' Could be on a square
        DEBUG "Middle, Right are Black", CR
        GOSUB LeftPivot
        GOSUB LeftPivot
        GOSUB MoveForward
        GOSUB MoveForward
      ELSE
        ' Only middle is black
        ' Line Following?
        DEBUG "Middle is Black", CR
      ENDIF
    ENDIF
  ELSE
    ' Nothing Reads as Black
    ' On red or silver
    DEBUG "Nothing is Black", CR
    GOSUB RightPivot
    GOSUB RightPivot
    GOSUB MoveForward
    GOSUB MoveForward
  ENDIF
PAUSE 50
RETURN

' Movement Methods



ReadPing:
  PULSOUT Ping_Pin, 13              ' Send short pulse to Ping
  PULSIN Ping_Pin, 1, time         ' Wait for echo
  inDistance = inConstant ** time  ' Convert to inches
  DEBUG CR, "Distance = ", DEC inDistance         ' Display result
RETURN

ReadWhiskers:
  IF IN14 = 0 THEN
    GOSUB MoveBackward
    GOSUB RightRotate
    GOTO SkipRest
  ENDIF
  IF IN0 = 0 THEN
    GOSUB MoveBackward
    GOSUB LeftRotate
    GOTO SkipRest
  ENDIF
RETURN




